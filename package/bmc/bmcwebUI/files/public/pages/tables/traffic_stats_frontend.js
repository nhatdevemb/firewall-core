// L∆∞u tr·ªØ th√¥ng tin phi√™n trong localStorage ƒë·ªÉ t√°i s·ª≠ d·ª•ng khi reload
let sessionID = localStorage.getItem("pihole_sid") || null;
let csrfToken = localStorage.getItem("pihole_csrf") || null;
let sessionExpiration = parseInt(localStorage.getItem("pihole_expiration")) || 0;
let retryCount = 0;

document.addEventListener("DOMContentLoaded", function () {
    console.log("üîÑ Ki·ªÉm tra phi√™n ƒëƒÉng nh·∫≠p...");
    checkSession();
    setInterval(fetchBlockedDomains, 30000); // C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªói 30 gi√¢y
});

function checkSession() {
    const now = Math.floor(Date.now() / 1000);
    console.log(`üïí Th·ªùi gian hi·ªán t·∫°i: ${now}`);
    console.log(`üîé Ki·ªÉm tra session... SID: ${sessionID}, H·∫øt h·∫°n: ${sessionExpiration}`);

    if (sessionID && now < sessionExpiration) {
        console.log(`‚úÖ SID c√≤n hi·ªáu l·ª±c (${sessionExpiration - now} gi√¢y c√≤n l·∫°i), ki·ªÉm tra v·ªõi server...`);
        verifySessionOnServer();
    } else {
        console.log("üîÑ SID h·∫øt h·∫°n ho·∫∑c ch∆∞a c√≥, x√≥a SID c≈© v√† y√™u c·∫ßu m·ªõi...");
        resetSession();  // üõë X√ìA SID C≈® TR∆Ø·ªöC KHI L·∫§Y M·ªöI
        getSessionID();
    }
}


// üîπ Ki·ªÉm tra `SID` tr√™n server b·∫±ng `/api/stats`
function verifySessionOnServer() {
    if (!sessionID) {
        console.log("üîç Kh√¥ng c√≥ SID, y√™u c·∫ßu m·ªõi...");
        getSessionID();
        return;
    }

    console.log("üîÑ Ki·ªÉm tra SID tr√™n server...");
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "https://192.168.2.55/api/stats/top_domains?blocked=true", true);
    xhr.setRequestHeader("X-FTL-SID", sessionID);
    xhr.setRequestHeader("X-FTL-CSRF", csrfToken);

    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            console.log(`üì° Ph·∫£n h·ªìi t·ª´ server: ${xhr.status}`);
            if (xhr.status === 200) {
                console.log("‚úÖ SID h·ª£p l·ªá, ti·∫øp t·ª•c s·ª≠ d·ª•ng.");
                fetchBlockedDomains();
            } else {
                console.warn("üîí SID kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n, h·ªßy session...");
                logoutAllSessions(getSessionID);
            }
        }
    };

    xhr.send();
}

// üîπ H·ªßy SID tr∆∞·ªõc khi l·∫•y m·ªõi ƒë·ªÉ tr√°nh l·ªói session limit
function logoutAllSessions(callback) {
    if (!sessionID) {
        console.log("üîí Kh√¥ng c√≥ SID, b·ªè qua b∆∞·ªõc logout.");
        callback();
        return;
    }

    console.log(`üîí ƒêang h·ªßy SID hi·ªán t·∫°i: ${sessionID}`);

    var xhr = new XMLHttpRequest();
    xhr.open("DELETE", `https://192.168.2.55/api/auth`, true);
    xhr.setRequestHeader("X-FTL-SID", sessionID);

    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            console.log(`üì° Ph·∫£n h·ªìi t·ª´ server khi h·ªßy SID: ${xhr.status}`);
            if (xhr.status === 204 || xhr.status === 410) {
                console.log("‚úÖ ƒê√£ h·ªßy SID c≈© th√†nh c√¥ng.");
            } else {
                console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ h·ªßy phi√™n ho·∫∑c kh√¥ng c√≥ phi√™n n√†o ho·∫°t ƒë·ªông.");
            }
            resetSession();
            callback();
        }
    };

    xhr.send(null);
}

function resetSession() {
    console.warn("üîÑ ƒêang x√≥a SID c≈© kh·ªèi localStorage do h·∫øt h·∫°n...");
    sessionID = null;
    csrfToken = null;
    sessionExpiration = 0;
    localStorage.removeItem("pihole_sid");
    localStorage.removeItem("pihole_csrf");
    localStorage.removeItem("pihole_expiration");
}


// üîπ L·∫•y SID m·ªõi t·ª´ Pi-hole n·∫øu c·∫ßn thi·∫øt
function getSessionID() {
    if (retryCount >= 3) {
        console.warn("‚ö†Ô∏è ƒê√£ th·ª≠ l·∫•y SID qu√° nhi·ªÅu l·∫ßn, d·ª´ng l·∫°i ƒë·ªÉ tr√°nh b·ªã ch·∫∑n.");
        return;
    }

    console.log("üîÑ ƒêang y√™u c·∫ßu SID m·ªõi...");
    
    var data = JSON.stringify({ "password": "admin123;" });

    var xhr = new XMLHttpRequest();
    xhr.open("POST", "https://192.168.2.55/api/auth", true);
    xhr.setRequestHeader("Content-Type", "application/json");

    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            console.log(`üì° Ph·∫£n h·ªìi t·ª´ server khi l·∫•y SID: ${xhr.status}`);
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                sessionID = response.session.sid;
                csrfToken = response.session.csrf;
                sessionExpiration = Math.floor(Date.now() / 1000) + response.session.validity;

                // L∆∞u v√†o localStorage ƒë·ªÉ d√πng l·∫°i khi t·∫£i l·∫°i trang
                localStorage.setItem("pihole_sid", sessionID);
                localStorage.setItem("pihole_csrf", csrfToken);
                localStorage.setItem("pihole_expiration", sessionExpiration);

                console.log(`‚úÖ L·∫•y SID th√†nh c√¥ng: ${sessionID}`);
                fetchBlockedDomains();
            } else {
                console.error("‚ùå L·ªói l·∫•y SID:", xhr.responseText);
                retryCount++;
            }
        }
    };

    xhr.send(data);
}

// üîπ L·∫•y danh s√°ch Top Blocked Domains
function fetchBlockedDomains() {
    if (!sessionID) {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ SID h·ª£p l·ªá, l·∫•y l·∫°i SID...");
        getSessionID();
        return;
    }

    console.log("üì° G·ªçi API l·∫•y Top Blocked Domains...");
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "https://192.168.2.55/api/stats/top_domains?blocked=true", true);
    xhr.setRequestHeader("X-FTL-SID", sessionID);
    xhr.setRequestHeader("X-FTL-CSRF", csrfToken);

    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            console.log(`üì° Ph·∫£n h·ªìi khi l·∫•y d·ªØ li·ªáu: ${xhr.status}`);
            if (xhr.status === 200) {
                var data = JSON.parse(xhr.responseText);
                console.log("üìä D·ªØ li·ªáu Top Blocked Domains:", data);
                updateBlockedDomainsTable(data);
            } else {
                console.error("‚ùå L·ªói khi g·ªçi API:", xhr.responseText);
            }
        }
    };

    xhr.send();
}

// üîπ H·ªßy SID khi r·ªùi trang
window.addEventListener("beforeunload", function () {
    console.log("üîí H·ªßy SID khi tho√°t trang...");
    logoutAllSessions();
});

function updateBlockedDomainsTable(data) {
    var tableBody = document.querySelector("#ad-frequency tbody");
    var overlay = document.querySelector("#ad-frequency .overlay");

    if (!tableBody) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ b·∫£ng trong DOM!");
        return;
    }

    // X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng
    tableBody.innerHTML = "";

    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (!data || !data.domains || !Array.isArray(data.domains)) {
        console.error("‚ùå D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu `domains`:", data);
        return;
    }

    console.log("‚úÖ C·∫≠p nh·∫≠t b·∫£ng v·ªõi d·ªØ li·ªáu m·ªõi...");

    // L·∫•y t·ªïng s·ªë l∆∞·ª£t truy c·∫≠p t·ª´ danh s√°ch
    let totalBlocked = data.domains.reduce((sum, item) => sum + item.count, 0);

    // L·∫∑p qua danh s√°ch domain v√† c·∫≠p nh·∫≠t b·∫£ng
    data.domains.forEach((item) => {
        let barWidth = (item.count / totalBlocked) * 100; // So v·ªõi t·ªïng s·ªë l∆∞·ª£t truy c·∫≠p c·ªßa t·∫•t c·∫£ domain

        var row = document.createElement("tr");
        row.innerHTML = `
            <td>${item.domain}</td>
            <td>${item.count}</td>
            <td>
                <div class="progress-container">
                    <div class="progress-bar" style="width: ${barWidth}%;"></div>
                </div>
            </td>
        `;
        tableBody.appendChild(row);
    });

    if (overlay) {
        overlay.style.display = "none";
    }
}


