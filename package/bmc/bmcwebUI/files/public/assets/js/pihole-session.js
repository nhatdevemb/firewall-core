let sessionID = localStorage.getItem("pihole_sid") || null;
let csrfToken = localStorage.getItem("pihole_csrf") || null;
let sessionExpiration = parseInt(localStorage.getItem("pihole_expiration")) || 0;
let deviceInfo_analysis = null;

// Ng∆∞·ª°ng th·ªùi gian t·ªëi thi·ªÉu ƒë·ªÉ gi·ªØ SID (gi√¢y)
const MINIMUM_VALIDITY_SECONDS = 30;

// H√†m thi·∫øt l·∫≠p th√¥ng tin thi·∫øt b·ªã
function setDeviceInfo(info) {
  deviceInfo_analysis = info;
  console.log("‚úÖ ƒê√£ thi·∫øt l·∫≠p th√¥ng tin thi·∫øt b·ªã:", deviceInfo_analysis);
}

// üîπ Ki·ªÉm tra SID h·ª£p l·ªá v√† th·ªùi gian c√≤n l·∫°i
async function checkSession() {
  const now = Math.floor(Date.now() / 1000);
  console.log(`üïí Th·ªùi gian hi·ªán t·∫°i: ${now}, SID: ${sessionID}, H·∫øt h·∫°n: ${sessionExpiration}`);

  if (sessionID && now < sessionExpiration) {
    const secondsRemaining = sessionExpiration - now;
    console.log(`üîé SID c√≤n ${secondsRemaining} gi√¢y.`);

    if (secondsRemaining > MINIMUM_VALIDITY_SECONDS) {
      console.log("‚úÖ SID c√≤n ƒë·ªß th·ªùi gian, ki·ªÉm tra v·ªõi server...");
      const isValid = await verifySessionOnServer();
      if (isValid) {
        console.log("‚úÖ SID h·ª£p l·ªá, ti·∫øp t·ª•c s·ª≠ d·ª•ng.");
        return sessionID;
      } else {
        console.log("‚ö†Ô∏è SID kh√¥ng h·ª£p l·ªá, h·ªßy v√† y√™u c·∫ßu m·ªõi...");
      }
    } else {
      console.log("‚ö†Ô∏è SID s·∫Øp h·∫øt h·∫°n, h·ªßy v√† y√™u c·∫ßu m·ªõi...");
    }
    await logoutSession(); // ƒê·∫£m b·∫£o h·ªßy tr∆∞·ªõc khi t·∫°o m·ªõi
  } else {
    console.log("üîÑ SID h·∫øt h·∫°n ho·∫∑c ch∆∞a c√≥, y√™u c·∫ßu m·ªõi...");
    await logoutSession(); // H·ªßy b·∫•t k·ª≥ session c≈© n√†o trong localStorage
  }

  return await getSessionID();
}

// üîπ Ki·ªÉm tra SID tr√™n server
function verifySessionOnServer() {
  return new Promise((resolve) => {
    if (!sessionID || !deviceInfo_analysis || !deviceInfo_analysis.device_ip) {
      console.error("‚ùå Thi·∫øu SID ho·∫∑c th√¥ng tin thi·∫øt b·ªã!");
      resolve(false);
      return;
    }

    console.log("üîÑ Ki·ªÉm tra SID tr√™n server...");
    const xhr = new XMLHttpRequest();
    xhr.open("GET", `https://${deviceInfo_analysis.device_ip}/api/stats/summary`, true);
    xhr.setRequestHeader("X-FTL-SID", sessionID);
    xhr.setRequestHeader("X-FTL-CSRF", csrfToken);

    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        console.log(`üì° Ph·∫£n h·ªìi t·ª´ server: ${xhr.status}`);
        if (xhr.status === 200) {
          try {
            const response = JSON.parse(xhr.responseText);
            if (response.session && response.session.validity) {
              sessionExpiration = Math.floor(Date.now() / 1000) + response.session.validity;
              localStorage.setItem("pihole_expiration", sessionExpiration);
              console.log(`‚úÖ SID ƒë∆∞·ª£c gia h·∫°n, h·∫øt h·∫°n m·ªõi: ${sessionExpiration}`);
            }
            resolve(true);
          } catch (e) {
            console.error("‚ùå L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi:", e);
            resolve(false);
          }
        } else {
          console.warn("üîí SID kh√¥ng h·ª£p l·ªá, tr·∫°ng th√°i:", xhr.status);
          resolve(false);
        }
      }
    };

    xhr.onerror = function () {
      console.error("‚ùå L·ªói m·∫°ng khi ki·ªÉm tra SID.");
      resolve(false);
    };

    xhr.send();
  });
}

// üîπ H·ªßy session hi·ªán t·∫°i v·ªõi retry n·∫øu th·∫•t b·∫°i
function logoutSession() {
  return new Promise((resolve, reject) => {
    if (!sessionID || !deviceInfo_analysis || !deviceInfo_analysis.device_ip) {
      console.log("üîí Kh√¥ng c√≥ SID ho·∫∑c th√¥ng tin thi·∫øt b·ªã, ƒë·∫∑t l·∫°i session.");
      resetSession();
      resolve();
      return;
    }

    let attempt = 0;
    const maxAttempts = 2;

    function attemptLogout() {
      console.log(`üîí ƒêang h·ªßy SID (l·∫ßn ${attempt + 1}): ${sessionID}`);
      const xhr = new XMLHttpRequest();
      xhr.open("DELETE", `https://${deviceInfo_analysis.device_ip}/api/auth`, true);
      xhr.setRequestHeader("X-FTL-SID", sessionID);

      xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
          console.log(`üì° Ph·∫£n h·ªìi t·ª´ server khi h·ªßy SID: ${xhr.status}`);
          if (xhr.status === 204 || xhr.status === 410) {
            console.log("‚úÖ ƒê√£ h·ªßy SID th√†nh c√¥ng.");
            resetSession();
            resolve();
          } else if (attempt < maxAttempts - 1) {
            console.warn("‚ö†Ô∏è H·ªßy SID th·∫•t b·∫°i, th·ª≠ l·∫°i...");
            attempt++;
            attemptLogout();
          } else {
            console.error("‚ùå Kh√¥ng th·ªÉ h·ªßy SID sau nhi·ªÅu l·∫ßn th·ª≠, ti·∫øp t·ª•c...");
            resetSession();
            resolve();
          }
        }
      };

      xhr.onerror = function () {
        console.error("‚ùå L·ªói m·∫°ng khi h·ªßy SID.");
        if (attempt < maxAttempts - 1) {
          attempt++;
          attemptLogout();
        } else {
          resetSession();
          resolve();
        }
      };

      xhr.send();
    }

    attemptLogout();
  });
}

// üîπ ƒê·∫∑t l·∫°i session
function resetSession() {
  console.warn("üîÑ ƒê·∫∑t l·∫°i session trong localStorage...");
  sessionID = null;
  csrfToken = null;
  sessionExpiration = 0;
  localStorage.removeItem("pihole_sid");
  localStorage.removeItem("pihole_csrf");
  localStorage.removeItem("pihole_expiration");
}

// üîπ L·∫•y SID m·ªõi v·ªõi x·ª≠ l√Ω l·ªói 429
async function getSessionID() {
  if (!deviceInfo_analysis || !deviceInfo_analysis.device_ip) {
    console.error("‚ùå Ch∆∞a c√≥ th√¥ng tin thi·∫øt b·ªã!");
    throw new Error("No device info available");
  }

  // ƒê·∫£m b·∫£o h·ªßy session c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
  await logoutSession();

  return new Promise((resolve, reject) => {
    const data = JSON.stringify({ password: "admin123;" });
    const xhr = new XMLHttpRequest();
    xhr.open("POST", `https://${deviceInfo_analysis.device_ip}/api/auth`, true);
    xhr.setRequestHeader("Content-Type", "application/json");

    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        console.log(`üì° Ph·∫£n h·ªìi t·ª´ server khi l·∫•y SID: ${xhr.status}`);
        if (xhr.status === 200) {
          try {
            const response = JSON.parse(xhr.responseText);
            if (response.session && response.session.sid) {
              sessionID = response.session.sid;
              csrfToken = response.session.csrf;
              sessionExpiration = Math.floor(Date.now() / 1000) + response.session.validity;

              localStorage.setItem("pihole_sid", sessionID);
              localStorage.setItem("pihole_csrf", csrfToken);
              localStorage.setItem("pihole_expiration", sessionExpiration);

              console.log(`‚úÖ L·∫•y SID th√†nh c√¥ng: ${sessionID}, h·∫øt h·∫°n: ${sessionExpiration}`);
              resolve(sessionID);
            } else {
              console.error("‚ùå Ph·∫£n h·ªìi kh√¥ng ch·ª©a SID:", xhr.responseText);
              reject(new Error("Invalid response format"));
            }
          } catch (e) {
            console.error("‚ùå L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi:", e);
            reject(new Error("Failed to parse response"));
          }
        } else if (xhr.status === 429) {
          console.warn("‚ö†Ô∏è ƒê·∫°t gi·ªõi h·∫°n session (429), th·ª≠ h·ªßy session v√† y√™u c·∫ßu l·∫°i...");
          logoutSession().then(() => getSessionID().then(resolve).catch(reject));
        } else if (xhr.status === 401) {
          console.error("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng:", xhr.responseText);
          reject(new Error("Unauthorized: Incorrect password"));
        } else if (xhr.status === 400) {
          console.error("‚ùå Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá:", xhr.responseText);
          reject(new Error("Bad request: Invalid payload"));
        } else {
          console.error("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh:", xhr.responseText);
          reject(new Error(`Failed to get session ID: ${xhr.status}`));
        }
      }
    };

    xhr.onerror = function () {
      console.error("‚ùå L·ªói m·∫°ng khi l·∫•y SID.");
      reject(new Error("Network error during session ID request"));
    };

    xhr.send(data);
  });
}

// Lo·∫°i b·ªè s·ª± ki·ªán beforeunload v√¨ kh√¥ng ƒë√°ng tin c·∫≠y
// window.addEventListener("beforeunload", async () => {
//   console.log("üîí C·ªë g·∫Øng h·ªßy SID khi tho√°t trang...");
//   await logoutSession();
// });

// Xu·∫•t c√°c h√†m v√† bi·∫øn c·∫ßn thi·∫øt
export {
  sessionID,
  csrfToken,
  sessionExpiration,
  setDeviceInfo,
  checkSession,
  getSessionID,
  logoutSession,
};

// // L∆∞u tr·ªØ th√¥ng tin phi√™n trong localStorage ƒë·ªÉ t√°i s·ª≠ d·ª•ng khi reload
// let sessionID = localStorage.getItem("pihole_sid") || null;
// let csrfToken = localStorage.getItem("pihole_csrf") || null;
// let sessionExpiration = parseInt(localStorage.getItem("pihole_expiration")) || 0;
// let retryCount = 0;

// // Bi·∫øn global ƒë·ªÉ l∆∞u th√¥ng tin thi·∫øt b·ªã (c·∫ßn ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi file ch√≠nh)
// let deviceInfo_analysis = null;

// // H√†m thi·∫øt l·∫≠p th√¥ng tin thi·∫øt b·ªã
// function setDeviceInfo(info) {
//   deviceInfo_analysis = info;
//   console.log("‚úÖ ƒê√£ thi·∫øt l·∫≠p th√¥ng tin thi·∫øt b·ªã trong checksession.js:", deviceInfo_analysis);
// }

// // üîπ Ki·ªÉm tra SID h·ª£p l·ªá v√† h·∫øt h·∫°n
// async function checkSession() {
//   const now = Math.floor(Date.now() / 1000);
//   console.log(`üïí Th·ªùi gian hi·ªán t·∫°i: ${now}`);
//   console.log(`üîé Ki·ªÉm tra session... SID: ${sessionID}, H·∫øt h·∫°n: ${sessionExpiration}`);

//   if (sessionID && now < sessionExpiration) {
//     console.log(`‚úÖ SID c√≤n hi·ªáu l·ª±c (${sessionExpiration - now} gi√¢y c√≤n l·∫°i), ki·ªÉm tra v·ªõi server...`);
//     const isValid = await verifySessionOnServer();
//     return isValid ? sessionID : null; // Tr·∫£ v·ªÅ sessionID n·∫øu h·ª£p l·ªá, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ null
//   } else {
//     console.log("üîÑ SID h·∫øt h·∫°n ho·∫∑c ch∆∞a c√≥, x√≥a SID c≈© v√† y√™u c·∫ßu m·ªõi...");
//     resetSession();
//     return await getSessionID(); // Tr·∫£ v·ªÅ sessionID m·ªõi
//   }
// }

// // üîπ Ki·ªÉm tra SID tr√™n server
// function verifySessionOnServer() {
//   return new Promise((resolve, reject) => {
//     if (!sessionID) {
//       console.log("üîç Kh√¥ng c√≥ SID, y√™u c·∫ßu m·ªõi...");
//       resolve(getSessionID());
//       return;
//     }
//     if (!deviceInfo_analysis || !deviceInfo_analysis.device_ip) {
//       console.error("‚ùå Ch∆∞a c√≥ th√¥ng tin thi·∫øt b·ªã trong checksession.js!");
//       reject(new Error("No device info available"));
//       return;
//     }

//     console.log("üîÑ Ki·ªÉm tra SID tr√™n server...");
//     var xhr = new XMLHttpRequest();
//     xhr.open("GET", `https://${deviceInfo_analysis.device_ip}/api/stats/top_domains?blocked=true`, true);
//     xhr.setRequestHeader("X-FTL-SID", sessionID);
//     xhr.setRequestHeader("X-FTL-CSRF", csrfToken);

//     xhr.onreadystatechange = function () {
//       if (xhr.readyState === XMLHttpRequest.DONE) {
//         console.log(`üì° Ph·∫£n h·ªìi t·ª´ server: ${xhr.status}`);
//         if (xhr.status === 200) {
//           console.log("‚úÖ SID h·ª£p l·ªá, ti·∫øp t·ª•c s·ª≠ d·ª•ng.");
//           resolve(true);
//         } else {
//           console.warn("üîí SID kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n, h·ªßy session...");
//           logoutAllSessions(() => resolve(getSessionID()));
//         }
//       }
//     };

//     xhr.send();
//   });
// }

// // üîπ H·ªßy SID tr∆∞·ªõc khi l·∫•y m·ªõi ƒë·ªÉ tr√°nh l·ªói session limit
// function logoutAllSessions(callback) {
//   if (!sessionID) {
//     console.log("üîí Kh√¥ng c√≥ SID, b·ªè qua b∆∞·ªõc logout.");
//     if (callback) callback();
//     return;
//   }

//   console.log(`üîí ƒêang h·ªßy SID hi·ªán t·∫°i: ${sessionID}`);

//   var xhr = new XMLHttpRequest();
//   xhr.open("DELETE", `https://${deviceInfo_analysis.device_ip}/api/auth`, true);
//   xhr.setRequestHeader("X-FTL-SID", sessionID);

//   xhr.onreadystatechange = function () {
//     if (xhr.readyState === XMLHttpRequest.DONE) {
//       console.log(`üì° Ph·∫£n h·ªìi t·ª´ server khi h·ªßy SID: ${xhr.status}`);
//       if (xhr.status === 204 || xhr.status === 410) {
//         console.log("‚úÖ ƒê√£ h·ªßy SID c≈© th√†nh c√¥ng.");
//       } else {
//         console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ h·ªßy phi√™n ho·∫∑c kh√¥ng c√≥ phi√™n n√†o ho·∫°t ƒë·ªông.");
//       }
//       resetSession();
//       if (callback) callback();
//     }
//   };

//   xhr.send(null);
// }

// // üîπ ƒê·∫∑t l·∫°i session khi c·∫ßn thi·∫øt
// function resetSession() {
//   console.warn("üîÑ ƒêang x√≥a SID c≈© kh·ªèi localStorage do h·∫øt h·∫°n...");
//   sessionID = null;
//   csrfToken = null;
//   sessionExpiration = 0;
//   localStorage.removeItem("pihole_sid");
//   localStorage.removeItem("pihole_csrf");
//   localStorage.removeItem("pihole_expiration");
// }

// // üîπ L·∫•y SID m·ªõi t·ª´ Pi-hole n·∫øu c·∫ßn thi·∫øt
// function getSessionID() {
//   return new Promise((resolve, reject) => {
//     if (retryCount >= 3) {
//       console.warn("‚ö†Ô∏è ƒê√£ th·ª≠ l·∫•y SID qu√° nhi·ªÅu l·∫ßn, d·ª´ng l·∫°i ƒë·ªÉ tr√°nh b·ªã ch·∫∑n.");
//       reject(new Error("Too many retries for session ID"));
//       return;
//     }

//     console.log("üîÑ ƒêang y√™u c·∫ßu SID m·ªõi...");
//     if (!deviceInfo_analysis || !deviceInfo_analysis.device_ip) {
//       console.error("‚ùå Ch∆∞a c√≥ th√¥ng tin thi·∫øt b·ªã trong checksession.js!");
//       reject(new Error("No device info available"));
//       return;
//     }

//     var data = JSON.stringify({ password: "admin123;" });

//     var xhr = new XMLHttpRequest();
//     xhr.open("POST", `https://${deviceInfo_analysis.device_ip}/api/auth`, true);
//     xhr.setRequestHeader("Content-Type", "application/json");

//     xhr.onreadystatechange = function () {
//       if (xhr.readyState === XMLHttpRequest.DONE) {
//         console.log(`üì° Ph·∫£n h·ªìi t·ª´ server khi l·∫•y SID: ${xhr.status}`);
//         if (xhr.status === 200) {
//           var response = JSON.parse(xhr.responseText);
//           sessionID = response.session.sid;
//           csrfToken = response.session.csrf;
//           sessionExpiration = Math.floor(Date.now() / 1000) + response.session.validity;

//           // L∆∞u v√†o localStorage ƒë·ªÉ d√πng l·∫°i khi t·∫£i l·∫°i trang
//           localStorage.setItem("pihole_sid", sessionID);
//           localStorage.setItem("pihole_csrf", csrfToken);
//           localStorage.setItem("pihole_expiration", sessionExpiration);

//           console.log(`‚úÖ L·∫•y SID th√†nh c√¥ng: ${sessionID}`);
//           resolve(sessionID); // Tr·∫£ v·ªÅ sessionID m·ªõi
//         } else {
//           console.error("‚ùå L·ªói l·∫•y SID:", xhr.responseText);
//           retryCount++;
//           reject(new Error("Failed to get session ID"));
//         }
//       }
//     };

//     xhr.send(data);
//   });
// }

// // üîπ H·ªßy SID khi r·ªùi trang
// window.addEventListener("beforeunload", function () {
//   console.log("üîí H·ªßy SID khi tho√°t trang...");
//   logoutAllSessions();
// });

// // Xu·∫•t c√°c h√†m v√† bi·∫øn c·∫ßn thi·∫øt ƒë·ªÉ c√°c file kh√°c s·ª≠ d·ª•ng
// export {
//   sessionID,
//   csrfToken,
//   sessionExpiration,
//   setDeviceInfo,
//   checkSession,
//   getSessionID,
//   logoutAllSessions,
// };


